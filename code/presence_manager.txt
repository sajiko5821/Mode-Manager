/**
 *  Presence Manager
 *
 *  Copyright 2021 Lukas Weier
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Presence Manager",
    namespace: "sajiko5821",
    author: "Lukas Weier",
    description: "A SmartApp to manage multiple Modes for your home",
    category: "Convenience",
    iconUrl: "https://raw.githubusercontent.com/sajiko5821/Presence-Manager/main/Icons/Presence_Manager_Icon_V1.png",
    iconX2Url: "https://raw.githubusercontent.com/sajiko5821/Presence-Manager/main/Icons/Presence_Manager_Icon_V1.png",
    iconX3Url: "https://raw.githubusercontent.com/sajiko5821/Presence-Manager/main/Icons/Presence_Manager_Icon_V1.png")


preferences {
	page(name: "mainPage", title: "Select matching Time and Modes", install: true, uninstall: true, submitOnChange: true){
    	section("Morning"){
        	input "morningMode", "mode", title: "Select Morning Mode", required: true
            input "morningFrom", "time", title: "From",required: true
        }
        
        section("Day"){
        	input "dayMode", "mode", title: "Select Day Mode", required: true
            input "dayFrom", "time", title: "From", required: true
      	}
        
        section("Night"){
        	input "nightMode", "mode", title: "Select Night Mode", required: true
            input "nightFrom", "time", title: "From", required: true
     	}       
        
        section("Midnight"){
        	input "midnightMode", "mode", title: "Select Midnight Mode", required: true
            input "midnightFrom", "time", title: "From", required: true
        }
        
        section("Away"){
        	input "awayMode", "mode", title: "Select Away Mode", required: true
            input "awaySensor", "capability.contactSensor", title: "Select Door Sensor", required: true
        }
	}
}

def installed() {
	log.debug "Installed with settings: ${settings}"
	initialize()
}

def updated() {
	log.debug "Updated with settings: ${settings}"
	unsubscribe()
	initialize()
}

def initialize() {
	subscribe(awaySensor, "contact.open", doorOpenHandler)
    subscribe(awaySensor, "contact.closed", doorClosedHandler)
    schedule(morningFrom, morningHandler)
    schedule(dayFrom, dayHandler)
    schedule(nightFrom, nightHandler)
    schedule(midnightFrom, midnightHandler)
}

def doorClosedHandler(evt){
	setLocationMode("Away")
    log.debug "Location Mode Away"
}

def doorOpenHandler(evt){
	def morningTime = timeOfDayBetween(morningFrom, dayFrom, new Date(), location.timeZone)
    def dayTime = timeOfDayBetween(dayFrom, nightFrom, new Date(), location.timeZone)
    def nightTime = timeOfDayBetween(nightFrom, midnightFrom, new Date(), location.timeZone)
    def midnightTime = timeOfDayBetween(midnightFrom, morningFrom, new Date(), location.timeZone)
    
    if(morningTime){
    	morningHandler()
    }
    
    if(dayTime){
    	dayHandler()
    }
    
    if(nightTime){
    	nightHandler()
    }
    
    if(midnightTime){
    	midnightHandler()
    }
    
    else{
    	nightHandler()
    }
}

def morningHandler(evt){
	setLocationMode("Morning")
    log.debug "Location Mode Morning"
}

def dayHandler(evt){
	setLocationMode("Day")
    log.debug "Location Mode Day"
}

def nightHandler(evt){
	setLocationMode("Night")
    log.debug "Location Mode Night"
}

def midnightHandler(evt){
	setLocationMode("Midnight")
    log.debug "Location Mode Midnight"
}
